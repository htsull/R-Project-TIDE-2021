#       plotOutput("plot1", height = 250)
#     })
#   }
#   else if(input$choose_tab == "Manual") {
#     output$test <- renderUI({
#       plotOutput("plot2", height = 250, click = "plot_click")
#     })
#   }
# })
#
# filter_by <- reactive({
#   if(tolower(input$tab_fil1) == "actor"){
#     lang1 <- data_$actors
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#
#   }else if(tolower(input$tab_fil1) == "language"){
#     lang1 <- data_$language[grepl(input$tab_fil1, data_$language)]
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#
#   }else if(tolower(input$tab_fil1) == "genre"){
#     lang1 <- data_$genre[grepl(input$tab_fil1, data_$genre)]
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#   }
#
# })
#
# data_$original_title[grepl('Action', data_$genre)] %>% length()
#
# data_$actors[grepl(input$tab_fil1, data_$actors)]
# observeEvent(
#   input$tab_fil1,
#   updateSelectInput(session,
#                     inputId = "tab_fil2",
#                     label = paste("Choose the", tolower(input$tab_fil1) ,"below"),
#                     choices = filter_by()
#   )
# )
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "UTF-8")
data_ <- read_delim (file = path_, delim = ",", header = T, locale  = "UTF-8")
# data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "UTF-8")
data_ <- read_delim (file = path_, delim = ",", locale  = "UTF-8")
# data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "UTF-8")
data_ <- read_delim (file = path_, delim = ",", locale  = "UTF-8")
data_<- read_delim(file = path_,
delim = ',',
col_names = T,
locale = "UTF-8")
data_<- read_delim(file = path_,
delim = ',',
col_names = T,
locale = "UTF-8")
data_ <- read.csv(file = path_, sep = ";", header = T, encoding = "UTF-8")
runApp()
runApp()
source("req_packages.R")
source("home_table.R")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ";", header = T, encoding = "UTF-8")
# data_<- read_delim(file = path_,
#                    delim = ',',
#                    col_names = T,
#                    locale = "UTF-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
source("req_packages.R")
source("home_table.R")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "UTF-8")
# data_<- read_delim(file = path_,
#                    delim = ',',
#                    col_names = T,
#                    locale = "UTF-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
runApp()
runApp()
runApp()
runApp()
runApp()
# Shiny dashboard project
# TIDE 2021-2022
# Par Berthony Sully et Clément Landy
# Define dashboardHeader()
header <- dashboardHeader(title = "Movies Database",
tags$li(class="dropdown",
tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial",
icon("github"),
"Source Code",
target="_blank"),
tags$li(class="dropdown",
tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial",
icon("github"),
"Source Code",
target="_blank")
)
)
)
# Define dashboardSidebar()
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Movies Infos", tabName = "movies_infos", icon = icon("film"),
badgeLabel =icon("info-circle"), badgeColor = "light-blue"),
menuItem("Data Table", icon = icon("th"), tabName = "data_table",
badgeLabel =icon("database"), badgeColor = "light-blue"),
menuItem("Hall of Fame", icon = icon("trophy"), tabName = "hall_of_fame",
badgeLabel =icon("sort-amount-up"), badgeColor = "light-blue")
)
)
# Define dashboardBody()
body <- dashboardBody(
# head links tag for css stylesheet
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "stylesheet.css"),
tags$style("tfoot {display: table-header-group;}")
),
tabItems(
tabItem("movies_infos",
# Row srtucture
fluidRow(
column(3,
# Define User inputs
selectInput("decade",
label = "Choose decade",
choices = decade_val,
selected = NULL),
selectInput("title",
label = "Choose title below",
choices = ""),
textOutput("founds"),
),
column(9,
uiOutput("filtered_table")
)
)
),
tabItem("data_table",
fluidPage(
fluidRow(dataTableOutput("data_view")
)
)
),
tabItem("hall_of_fame")
)
)
# ui out to server
ui<-dashboardPage(header, sidebar, body)
# Shiny dashboard project
# TIDE 2021-2022
# Par Berthony Sully et Clément Landy
# Define dashboardHeader()
header <- dashboardHeader(title = "Movies Database",
tags$li(class="dropdown",
tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial",
icon("github"),
"Source Code",
target="_blank"),
tags$li(class="dropdown",
tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial",
icon("github"),
"Source Code",
target="_blank")
)
)
)
# Define dashboardSidebar()
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Movies Infos", tabName = "movies_infos", icon = icon("film"),
badgeLabel =icon("info-circle"), badgeColor = "light-blue"),
menuItem("Data Table", icon = icon("th"), tabName = "data_table",
badgeLabel =icon("database"), badgeColor = "light-blue"),
menuItem("Hall of Fame", icon = icon("trophy"), tabName = "hall_of_fame",
badgeLabel =icon("sort-amount-up"), badgeColor = "light-blue")
)
)
# Define dashboardBody()
body <- dashboardBody(
# head links tag for css stylesheet
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "stylesheet.css"),
tags$style("tfoot {display: table-header-group;}")
),
tabItems(
tabItem("movies_infos",
# Row srtucture
fluidRow(
column(3,
# Define User inputs
selectInput("decade",
label = "Choose decade",
choices = decade_val,
selected = NULL),
selectInput("title",
label = "Choose title below",
choices = ""),
textOutput("founds"),
),
column(9,
uiOutput("filtered_table")
)
)
),
tabItem("data_table",
fluidPage(
fluidRow(dataTableOutput("data_view")
)
)
),
tabItem("hall_of_fame")
)
)
# ui out to server
ui<-dashboardPage(header, sidebar, body)
server <- function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "title",
label = "Choose the title below",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$original_title[data_$decade == input$decade] %>% sort
})
# filtering data and rendering to htmlTable
output$filtered_table <- renderUI({
table(original_title = input$title,
year = data_$year[data_$decade == input$decade & data_$original_title == input$title],
director = data_$director[data_$decade == input$decade & data_$original_title == input$title],
genre = data_$genre[data_$decade == input$decade & data_$original_title == input$title],
writer = data_$writer[data_$decade == input$decade & data_$original_title == input$title],
duration = data_$duration[data_$decade == input$decade & data_$original_title == input$title],
production_company = data_$production_company[data_$decade == input$decade & data_$original_title == input$title],
country = data_$country[data_$decade == input$decade & data_$original_title == input$title],
actors = data_$actors[data_$decade == input$decade & data_$original_title == input$title],
language = data_$language[data_$decade == input$decade & data_$original_title == input$title],
avg_vote = data_$avg_vote[data_$decade == input$decade & data_$original_title == input$title],
budget = data_$budget[data_$decade == input$decade & data_$original_title == input$title],
description = data_$description[data_$decade == input$decade & data_$original_title == input$title]
)
})
# output of the findings length afer user input filter
output$founds <- reactive({
paste(data_$original_title[data_$decade == input$decade] %>% length(), "result(s) found")
})
out <-  data_ %>%
select(Title = original_title,
Genre = genre,
Duration = duration,
Country = country,
Language = language,
Director = director,
Writer = writer,
` Prod. Company` = production_company) %>% head()
output$data_view <- renderDataTable(
out,
options = list(pageLength = 20,
lengthChange = FALSE,
autoWidth = TRUE,
searching= T
)
)
}
#####################################################################
# titleChoices <- reactive({
#   data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
# })
# observeEvent(
#   input$decade,
#   updateSelectInput(session,
#                     inputId = "language",
#                     label = "Language",
#                     choices = uniLang())
#   )
#
#to use fo language filter
# testLang <- data_$language[grepl("French", data_$language)] %>%
#   paste(collapse = ',') %>%
#   strsplit(",")
# testLang <- testLang[[1]] %>%
#   unique %>% sort() %>%  as.list()
# dashboardFooter <- function(left = NULL, right = NULL) {
#   htmltools::tags$footer(
#     class = "main-footer",
#     shiny::tags$div(class = "pull-right hidden-xs", right),
#     left
#     )
#
#   }
#
# filter_data <- function(x){
#   eval(parse("data_$",x,"[data_$decade == input$decade & data_$title == input$title]"))
# }
# slice_choices <- reactive({
#   data_$title[data_$decade == input$decade] %>% filter(contains("a"))
# })
#
# observeEvent(
#   input$decade,
#   updateSelectInput(session,
#                     inputId = "a_d",
#                     label = "A_D",
#                     choices = slice_choices()
#                     )
# )
#
# testServer <- eventReactive(input$submit, {
#   paste("click")
# })
#
# output$test <- reactive({
#   testServer()
#
# })
#
# observe({
#   if (input$choose_tab == "Automatic") {
#     output$test <- renderUI({
#       plotOutput("plot1", height = 250)
#     })
#   }
#   else if(input$choose_tab == "Manual") {
#     output$test <- renderUI({
#       plotOutput("plot2", height = 250, click = "plot_click")
#     })
#   }
# })
#
# filter_by <- reactive({
#   if(tolower(input$tab_fil1) == "actor"){
#     lang1 <- data_$actors
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#
#   }else if(tolower(input$tab_fil1) == "language"){
#     lang1 <- data_$language[grepl(input$tab_fil1, data_$language)]
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#
#   }else if(tolower(input$tab_fil1) == "genre"){
#     lang1 <- data_$genre[grepl(input$tab_fil1, data_$genre)]
#     lang2 <- paste(lang1, collapse = ',')
#     lang3 <- strsplit(lang2, ",")
#     lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
#     return(lang4)
#   }
#
# })
#
# data_$original_title[grepl('Action', data_$genre)] %>% length()
#
# data_$actors[grepl(input$tab_fil1, data_$actors)]
# observeEvent(
#   input$tab_fil1,
#   updateSelectInput(session,
#                     inputId = "tab_fil2",
#                     label = paste("Choose the", tolower(input$tab_fil1) ,"below"),
#                     choices = filter_by()
#   )
# )
source("req_packages.R")
source("home_table.R")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "UTF-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
library(readr)
table <- function(original_title, year, director, genre, writer, duration,
production_company, country, actors, language, avg_vote,
budget, description) {
tagList(HTML(glue::glue('
<table border="0" cellpadding="0" cellspacing="0" width="auto" style="border-collapse:
collapse;table-layout:fixed ;width:auto">
<colgroup><col width=auto span="2" style="mso-width-source:userset;mso-width-alt:7862;
width:161pt">
<col width="215" style="mso-width-source:userset;mso-width-alt:7862;width:161pt">
<col width="215" style="mso-width-source:userset;mso-width-alt:7862;width:161pt">
<col width="80" span="3" style="width:60pt">
</colgroup><tbody><tr height="20" style="height:15.0pt">
<td colspan="4" rowspan="2" height="40" class="xl66" width="860" style="height:30.0pt; width:644pt;display:table-cell">
<div style="margin-right:10px" contenteditable="false">{original_title}</div>
</td>
<td rowspan="2" class="xl65" width="80" style="width:60pt">
<div style="margin-right:10px"></div>
</td>
<td rowspan="2" class="xl65" width="80" style="width:60pt">
<div style="margin-right:10px"></div>
</td>
<td rowspan="2" class="xl65" width="80" style="width:60pt">
<div style="margin-right:10px"></div>
</td>
</tr>
<tr height="20" style="height:15.0pt">
</tr>
<tr height="76" style="height:57.0pt">
<td height="76" class="xl67" width="auto" style="height:57.0pt;width:161pt;
display:table-cell">
<div style="margin-right:10px">Year Published</div></td>
<td class="xl70" width="215" style="width:161pt">
<div style="margin-right:10px">{year}</div></td>
<td class="xl67" width="215" style="width:161pt">
<div style="margin-right:10px">Director</div></td>
<td class="xl70" width="215" style="width:161pt">
<div style="margin-right:10px">{director}</div>
</td>
<td></td>
<td colspan="2" style="mso-ignore:colspan"></td>
</tr>
<tr height="38" style="height:28.5pt">
<td height="38" class="xl68" width="215" style="height:28.5pt;border-top:none;
width:161pt;display:table-cell">
<div style="margin-right:10px">Genre</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{genre}</div></td>
<td class="xl68" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">Writer(s)</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{writer}</div>
</td>
<td></td>
<td colspan="2" style="mso-ignore:colspan"></td>
</tr>
<tr height="76" style="height:57.0pt">
<td height="76" class="xl68" width="215" style="height:57.0pt;border-top:none;
width:161pt;display:table-cell">
<div style="margin-right:10px">Duration (m)</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{duration}</div></td>
<td class="xl68" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">Production company</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{production_company}</div>
</td>
<td colspan="3" style="mso-ignore:colspan"></td>
</tr>
<tr height="38" style="height:28.5pt">
<td height="38" class="xl69" width="215" style="height:28.5pt;border-top:none;
width:161pt;display:table-cell">
<div style="margin-right:10px">Country</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{country}</div></td>
<td class="xl68" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">Actors</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{actors}</div>
</td>
<td></td>
<td colspan="2" style="mso-ignore:colspan"></td>
</tr>
<tr height="38" style="height:28.5pt">
<td height="38" class="xl68" width="215" style="height:28.5pt;border-top:none;
width:161pt;display:table-cell">
<div style="margin-right:10px">Language</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{language}</div></td>
<td class="xl68" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">Average vote</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{avg_vote}</div>
</td>
<td></td>
<td colspan="2" style="mso-ignore:colspan"></td>
</tr>
<tr height="38" style="height:28.5pt">
<td height="38" class="xl69" width="215" style="height:28.5pt;border-top:none;
width:161pt;display:table-cell">
<div style="margin-right:10px">Budget</div></td>
<td class="xl71" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">{budget}</div></td>
<td class="xl72" width="215" style="border-top:none;width:161pt">
<div style="margin-right:10px">Description</div>
&nbsp;</td>
<td class="xl73" width="215" style="border-top:none;width:161pt;display:table-cell">
<div style="margin-right:10px">{description}</div>
&nbsp;</td>
<td></td>
<td colspan="2" style="mso-ignore:colspan"></td>
</tr>
</tbody></table>
')
)
)
}
runApp()
