column(8,
uiOutput("test")
)
)
)
ui<-dashboardPage(header, sidebar, body)
server <- function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "language",
label = "Language",
choices = uniLang())
)
uniLang <- reactive({
lang1 <- data_$language[data_$decade == input$decade]
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
})
observeEvent(
input$language,
updateSelectInput(session,
inputId = "title",
label = "Title",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
})
}
shinyApp(ui = ui, server = server)
detach("package:rsconnect", unload = TRUE)
detach("package:graphics", unload = TRUE)
library(rsconnect)
deployApp()
warnings()
library(graphics, lib.loc = "C:/Program Files/R/R-4.1.1/library")
runApp()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(stringr)
library(graphics)
path_ <- "C:/Users/bsully/OneDrive - Université Paris 1 Panthéon-Sorbonne/Documents/GitHub/R-Project-TIDE-2021/Project_2021_sol/shiny_app/data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "utf-8" )
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
deployApp()
runApp('C:/Users/bsully/OneDrive - Université Paris 1 Panthéon-Sorbonne/Bureau/New_rep/test')
deployApp()
deployApp()
deployApp()
setwd("C:/Users/bsully/OneDrive - Université Paris 1 Panthéon-Sorbonne/Bureau/New_rep/test")
deployApp()
runApp()
deployApp()
importFrom(shinydashboard,box)
runApp()
deployApp()
setwd("~/GitHub/R-Project-TIDE-2021/Project_2021_sol/Shiny_app")
shiny::runApp()
header <- dashboardHeader(title = "Movies Database",
tags$li(class="dropdown",tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial", icon("github"), "Source Code", target="_blank"))
)
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styling.css")
),
fluidRow(
column(4,
selectInput("decade",
label = "Choose decade",
choices = decade_val,
selected = "2010 - 2020"
),
selectInput("language",
label = "Choose language below",
choices = ""
),
selectInput("title",
label = "Choose title below",
choices = ""
)
)
)
)
ui<-dashboardPage(header, sidebar, body)
server <- function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "language",
label = "Language",
choices = uniLang())
)
uniLang <- reactive({
lang1 <- data_$language[data_$decade == input$decade]
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
})
observeEvent(
input$language,
updateSelectInput(session,
inputId = "title",
label = "Title",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
})
}
runApp()
shinyApp(ui = ui, server = server)
library(rsconnect)
runApp()
runApp()
runApp()
server <- function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "language",
label = "Language",
choices = uniLang())
)
uniLang <- reactive({
lang1 <- data_$language[data_$decade == input$decade]
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
})
observeEvent(
input$language,
updateSelectInput(session,
inputId = "title",
label = "Title",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
})
}
View(server)
function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "language",
label = "Language",
choices = uniLang())
)
uniLang <- reactive({
lang1 <- data_$language[data_$decade == input$decade]
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
})
observeEvent(
input$language,
updateSelectInput(session,
inputId = "title",
label = "Title",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
})
}
View(header)
runApp()
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
library(rsconnect)
runApp()
runApp()
runApp()
runApp()
install.packages("gt")
install.packages("glue")
install.packages("glue")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
runApp()
View(data_)
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
View(data_)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
source("modules.R")
runApp()
runApp()
runApp()
table <- function() {
tagList(HTML(glue::glue('
<h1>Hello<h1/>
')
)
)
}
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
source("modules.R")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
header <- dashboardHeader(title = "Movies Database",
tags$li(class="dropdown",tags$a(href="https://github.com/aagarw30/R-Shinyapp-Tutorial", icon("github"), "Source Code", target="_blank"))
)
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styling.css")
),
fluidRow(
column(4,
selectInput("decade",
label = "Choose decade",
choices = decade_val,
selected = "2010 - 2020"
),
selectInput("language",
label = "Choose language below",
choices = ""
),
selectInput("title",
label = "Choose title below",
choices = ""
)
),
column(8,
tableOutput("test")
)
)
)
ui<-dashboardPage(header, sidebar, body)
server <- function(input, output, session) {
observeEvent(
input$decade,
updateSelectInput(session,
inputId = "language",
label = "Language",
choices = uniLang())
)
uniLang <- reactive({
lang1 <- data_$language[data_$decade == input$decade]
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
})
observeEvent(
input$language,
updateSelectInput(session,
inputId = "title",
label = "Title",
choices = titleChoices()
)
)
titleChoices <- reactive({
data_$title[data_$decade == input$decade & str_detect(data_$language, input$language)]
})
output$test <- renderTable({
output$test <- table()
})
}
# table <- function() {
#   tagList(HTML(glue::glue('
#
#                           <h1>Hello<h1/>
#
#
#                           ')
#               )
#         )
# }
table <- function() {print(data_)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "./www/styling.css")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
View(data_)
runApp()
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
apply(data_,2,max,na.rm=TRUE)
data_
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
library(shiny)
library(shinydashboard)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
source("modules.R")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
apply(data_,2,max,na.rm=TRUE)
apply(data_$language,2,max,na.rm=TRUE)
apply(data_,1,max,na.rm=TRUE)
View(data_)
apply(data_$language,1,max,na.rm=TRUE)
data_ <- na.omit(data_)
View(data_)
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
data_ <- na.omit(data_$language)
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
data_ <- na.omit(data_$language)
data_$language[data_$language == "None"] <- NA
data_<- na.omit(data_, "language")
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
data_<- na.omit(data_, c("language"))
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
data_.dropna(language)
drop_na(data_)
drop_na(data_)
View(data_)
df <- drop_na(data_)
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filter_data <- function(x){
paste0("data_$",x,"[data_$decade == input$decade & data_$title == input$title]")
}
runApp()
runApp()
runApp()
runApp()
runApp()
summary(data_)
data_$num_budget < as.numeric(data_$budget)
data_$num_budget < as.numeric(data_$budget)
num_budget
data_
data_$num_budget <- as.numeric(data_$budget)
View(data_)
data_$num_budget <- as.numeric(sub("$",replacement = ""), data_$budget)
data_$num_budget <- as.numeric(sub(x =  data_$budget, pattern = "$",replacement = ""))
View(data_)
data_$num_budget <- as.numeric(substr(x =  data_$budget, start = 1, stop = 2))
View(data_)
data_$num_budget <- substr(x =  data_$budget, start = 1, stop = 2)
data_$num_budget <- substr(x =  data_$budget, start = 2, stop = length(x))
data_$num_budget <- substr(x =  data_$budget, start = 2)
data_$num_budget <- substr(x =  data_$budget, start = 2, stop = Inf)
data_$num_budget <- substr(x =  data_$budget, start = 2, stop = length(.))
library(readr)
data_$num_budget <- parse_number(data_$budget)
install.packages("readr")
data_$num_budget <- parse_number(data_$budget)
data_ %>% mutate(budget = num_budget %>% str_remove_all("\\$,") %>% as.numeric())
data_ %>% mutate(num_budget= budget %>% str_remove_all("\\$,") %>% as.numeric())
data_$num_budget <- str_replace_all(data_$budget, "$","")
data_$num_budget <- str_replace(data_$budget, "$","")
View(data_)
data_$num_budget <- str_replace(string = data_$budget, pattern = "$", replacement = "")
data_$num_budget <- as.integer(sub("$", "",data_$budget))
View(data_)
data_$num_budget <- sub("$", "",data_$budget)
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
path_ <- "./data_shiny_useable.csv"
data_ <- read.csv(file = path_, sep = ",", header = T, encoding = "uft-8")
decade_val <- unique(data_$decade) %>%  sort %>% as.list
data_$language[data_$language == "None"] <- NA
runApp()
runApp()
runApp()
runApp()
filter_data <- function(x){
eval(parse("data_$",x,"[data_$decade == input$decade & data_$title == input$title]"))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lang1 <- data_$actors
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(stringr)
library(graphics)
library(gt)
library(glue)
library(readr)
lang1 <- data_$actors
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
lang4
lang1 <- data_$actors
lang2 <- paste(lang1, collapse = ',')
lang3 <- strsplit(lang2, ",")
lang4 <- lang3[[1]] %>% unique %>% sort() %>%  as.list()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
