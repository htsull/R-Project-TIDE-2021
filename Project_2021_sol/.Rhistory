geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=c(mean,median))) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=c(mean))) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, color=variable)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, color=variable)) +
geom_bar(stat="identity", fill="grenn")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, color=variable)) +
geom_bar(stat="identity", fill="green")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, color=variable)) +
geom_bar(stat="identity", fill="white")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, color=variable)) +
geom_bar(stat="identity")+theme_minimal()+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity")+theme_minimal()+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=sd, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=sd), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=mad, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mad), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=coef_de_var, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=coef_de_var), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=max, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=max), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=min, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=min), vjust=-0.3, size=3.5)+
theme_minimal()
barplot(Ind_Sat, beside = F, las = 3,ylab = "légende axe Y", xlab = "Légende axe X",  main = "Titre",legend = T)
barplot(Ind_Stat, beside = F, las = 3,ylab = "légende axe Y", xlab = "Légende axe X",  main = "Titre",legend = T)
barplot(t(Ind_Stat), beside = T, las = 3,ylab = "légende axe Y", xlab = "Légende axe X",  main = "Titre",legend = T)
barplot(t(Ind_Stat),
beside = T, las = 3,ylab = "légende axe Y", xlab = "Légende axe X",  main = "Titre",legend = T)
ggplot(Ind_Stat,aes(x=Ind_Stat$variable["avg_vote"],y=c(Ind_Stat$mean, Ind_Stat$median),fill=type))+geom_bar(binwidth=0.5,position="dodge")
ggplot(Ind_Stat,aes(x=Ind_Stat$variable["avg_vote"],y=c(Ind_Stat$mean, Ind_Stat$median),fill=mean))+geom_bar(binwidth=0.5,position="dodge")
dfr <- data.frame(
V1 = c(0.1, 0.2, 0.3),
V2 = c(0.2, 0.3, 0.2),
V3 = c(0.3, 0.6, 0.5),
V4 = c(0.5, 0.1, 0.7),
row.names = LETTERS[1:3]
)
dfr <- data.frame(
V1 = c(0.1, 0.2, 0.3),
V2 = c(0.2, 0.3, 0.2),
V3 = c(0.3, 0.6, 0.5),
V4 = c(0.5, 0.1, 0.7),
row.names = LETTERS[1:3]
)
dfr
dfr <- data.frame(
V1 = c(0.1, 0.2, 0.3),
V2 = c(0.2, 0.3, 0.2),
V3 = c(0.3, 0.6, 0.5),
V4 = c(0.5, 0.1, 0.7),
row.names = LETTERS[1:3]
)
dfr$category <- row.names(dfr)
dfr$category
dfr
mdfr <- melt(dfr, id.vars = "category")
library(ggplot2)
dfr$category <- row.names(dfr)
mdfr <- melt(dfr, id.vars = "category")
mdfr <- reshape(dfr, id.vars = "category")
dfr$category <- row.names(dfr)
mdfr <- reshape2::(dfr, id.vars = "category")
dfr$category <- row.names(dfr)
mdfr <- reshape2(dfr, id.vars = "category")
library(scales)
(p <- ggplot(Ind_Stat, aes(variable, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
p <- ggplot(Ind_Stat, aes(variable, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
library(scales)
p <- ggplot(Ind_Stat, aes(variable, mean, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
p
install.packages("reshape2")
dfr$category <- row.names(dfr)
mdfr <- melt(dfr, id.vars = "category")
library(ggplot2)
library(reshape)
install.packages("reshape")
library(reshape)
dfr$category <- row.names(dfr)
mdfr <- melt(dfr, id.vars = "category")
library(scales)
(p <- ggplot(mdfr, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
library(reshape)
Ind_Stat$category <- row.names(Ind_Stat)
mdfr <- melt(Ind_Stat, id.vars = "category")
library(scales)
(p <- ggplot(mdfr, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(reshape)
Ind_Stat$category <- row.names(Ind_Stat)
mdfr <- melt(Ind_Stat, id.vars = "category")
Ind_Stat$category <- row.names(Ind_Stat)
Ind_Stat$category
Ind_Stat
mdfr <- melt(Ind_Stat, id.vars = "vari")
mdfr <- melt(Ind_Stat, id.vars = "category")
mdfr <- melt(Ind_Stat, id.vars = "variable")
mdfr <- melt(Ind_Stat, id.vars = "variable")
Ind_Stat$category <- row.names(Ind_Stat)
mdfr <- melt(Ind_Stat, id.vars = "category")
mdfr <- melt(Ind_Stat, id.vars = "variable")
row.names(Ind_Stat)
row.names(Ind_Stat) <- Ind_Stat$variable
row.names(Ind_Stat)
Ind_Stat$category <- row.names(Ind_Stat)
mdfr <- melt(Ind_Stat, id.vars = "category")
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat) <- Ind_Stat$variable
Ind_Stat
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
help("melt")
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat)
names(Ind_Stat)
library(reshape)
row.names(Ind_Stat) <- Ind_Stat$variable
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
library(ggplot2)
library(reshape)
dfr$category <- row.names(dfr)
row.names(dfr)
dfr$category
library(reshape)
row.names(Ind_Stat) <- Ind_Stat$variable
Ind_Stat$category <- row.names(Ind_Stat)
row.names(Ind_Stat)
Ind_Stat$category
row.names(Ind_Stat) <- Ind_Stat$variable
row.names(Ind_Stat)
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
Ind_Stat$category <- row.names(Ind_Stat)
row.names(Ind_Stat)
row.names(Ind_Stat)
Ind_Stat$variable
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat$variable, id.vars = "category")
library(scales)
(p <- ggplot(mdfr, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
(p <- ggplot(mInd_Stat, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat$variable, id.vars = "category")
library(scales)
(p <- ggplot(mInd_Stat, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
mInd_Stat
library(ggplot2)
library(reshape)
dfr$category <- row.names(dfr)
mdfr <- melt(dfr, id.vars = "category")
mdfr
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat$variable, id.vars = "category")
library(scales)
(p <- ggplot(mInd_Stat, aes(category, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
)
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
row.names(Ind_Stat)
row.names(Ind_Stat)
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
row.names(Ind_Stat)
Ind_Stat
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "variable")
dfr <- data.frame(
V1 = c(0.1, 0.2, 0.3),
V2 = c(0.2, 0.3, 0.2),
V3 = c(0.3, 0.6, 0.5),
V4 = c(0.5, 0.1, 0.7),
row.names = LETTERS[1:3]
)
dfr
Ind_Stat <- data %>% imap_dfr(report)
data <-complete_data %>%
select(starts_with("avg_vote"))
---
title: "Project 2021 TIDE"
author: "Berthony Sully & Landy Clément"
date: "9/16/2021"
output:
html_document:
df_print: paged
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```
### 1.Proposer un code permettant de regrouper les données contenues dans movies.zip dans un seul et même data.frame.
```{r, message = FALSE}
#Attach the necessary libraries
library(dplyr)
library(readr)
#1. Capture the raw pat of the zip folder
raw_path <- "C:/Users/cleme/Desktop/Projet_m2_tide/aaaaa/R-Project-TIDE-2021/Project_2021_sol/movies.zip"
#2. unzip the folder
data <- unzip(raw_path, files = NULL, list = F, exdir = "movie_unzip")
#3. Capture the new path to the folder that contains the datasets
path_ <- "C:/Users/cleme/Documents/GitHub/R-Project-TIDE-2021/Project_2021_sol/movie_unzip"
#4. Create a function to merge all the datasets
merge_df = function(path_to_folder){
#capture the names of the files in the folder
list_name_file = list.files(path = path_to_folder, full.names = T)
#read all the files in the folder
data_list = lapply(list_name_file, function(x){
read.csv(file = x, header = TRUE)
}) #x --> names of the files to read (in this case 'list_name_file')
#combine the datasets with the reduce function
#after merging them two by two (merge function)
Reduce(function(x, y){merge(x, y, all = T)}, data_list)
}
#5. Store the complete merged dataset
complete_data <- merge_df(path_)
```
### 2. Observer pour chaque variable, le nombre et la proportion de valeurs manquantes.
```{r, message=FALSE}
# Number of missing values
na_num <- complete_data %>%
summarise_all(funs(sum(is.na(.))))
print.table(na_num)
```
```{r}
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
```
#### Nous constatons que la variable Country ne contient pas de NA. Cependant, ladite variavle et d'autres ont des cases vides. Ainsi, nous avons  décidé de les gérer comme des NAs.
```{r}
complete_data[complete_data == ""]<- NA # Remplacer les vides par des NAs.
```
### 2.1. Observons à nouveau pour chaque variable, le nombre et la proportion de valeurs manquantes.
```{r, message=FALSE}
# Number of missing values
na_num <- complete_data %>%
summarise_all(funs(sum(is.na(.))))
print.table(na_num)
```
```{r}
#  Presentage of missng values
na_percent <- round(na_num/sum(is.na(complete_data) * 100), 3)
print.table(na_percent)
```
#### J'aurais préféré ce code pour le pourcentage au lieu de celui que t'as utilisé. L'autre n'affiche pas tous les pourcentages
```{r}
round(sapply(complete_data,function(x) sum(is.na(x))/length(x))*100, 3)
```
### 3. Représenter graphiquement la distribution de la durée des films
```{r}
library(tidyverse)
complete_data$duration <- as.numeric(complete_data$duration)
ggplot(complete_data, aes(x = duration)) +
geom_histogram(color = "red", fill = 'green', binwidth = 50, alpha = 1)  +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Représentation graphique de la durée des films', x = 'Durée', y = 'Effectif') +
scale_y_continuous(n.breaks = 15) +
scale_x_continuous(n.breaks = 20)
```
### 4. Compter le nombre de films dans lesquels la langue française apparait.
```{r}
library(stringr)
complete_data %>%
filter(str_detect(language, "French|.French.")) %>%
select(language) %>%
count() %>%
paste(.,'films sont disponibles en francais')
```
### 5. Créer une variable permettant de discrétiser la variable year par décennie (ex : 1975 => Entre 1970 et 1980, 1995 => Entre 1990 et 2000, 2001 => Entre 2000 et 2010…)
```{r}
paste("La variable Year est de type :", typeof(complete_data$year))
```
#### On peut essayer de voir les valeurs uniques de year pour avoir une plus nette explication
```{r}
unique(complete_data$year)
```
#### La valeur "TV Movie 2019" semble être le probleme. Pour cela, étant donné qu'on connait le contexe on peut remplacer cette valeur par "2019" et convertir la variable au type 'numeric.
```{r, message=FALSE, warning=FALSE}
# Select year column
complete_data$year <- complete_data$year %>%
#convert as numeric type
as.numeric %>%
#replace the NA value with 2019
replace_na(., 2019)
#show unique value of recently created year column
unique(complete_data$year)
```
```{r}
#creation of the "decade variable"
complete_data$decade <- cut(complete_data$year,
breaks = c(seq(1890,
2020, 10)),
labels = c("1890 - 1900",
"1900 - 1910",
"1910 - 1920",
"1920 - 1930",
"1930 - 1940",
"1940 - 1950",
"1950 - 1960",
"1960 - 1970",
"1970 - 1980",
"1980 - 1990",
"1990 - 2000",
"2000 - 2010",
"2010 - 2020"),
right = F,
include.lowest = T)
#randomly select some line in year and decade columns to verify the results
complete_data %>%
select(year, decade)%>%
sample_n(50)
```
### 6. Proposer une représentation graphique permettant d’observer pour chaque décennie, le nombre et la proportion de films dans lesquels la langue française apparait.
```{r}
complete_data %>%
select(language, decade) %>%
group_by(decade) %>%
count(french = str_detect(language, "French|.French.")) %>%
mutate(p = n / sum(n)) %>%
filter(french == T) %>%
ggplot(aes(y = decade, label = p)) +
geom_bar(aes(weight = n), fill = "steelblue") +
theme(plot.title = element_text(hjust = .5)) +
labs(title = "Représentation de la quantité de films /n dans lesquels la langue française apparait par décenie",
x = "Effectif", y = "Décennie")
# geom_text(aes(label = paste0(round(hist(df$n, plot = FALSE)$counts / length(df) * 100, 1), "%")), hjust=1.6, color="white", size=3.5)*
```
```{r}
complete_data %>%
select(language, decade) %>%
group_by(decade) %>%
count(french = str_detect(language, "French|.French.")) %>%
mutate(p = n / sum(n)) %>%
filter(french == T) %>%
ggplot(aes(y = decade, label = p)) +
geom_bar(aes(weight = p), fill = "steelblue")+
scale_x_continuous(labels = scales::percent) +
theme(plot.title = element_text(hjust = .5)) +
labs(title = "Représentation de la proportion de films /n dans lesquels la langue française apparait par décenie",x = "Pourcentage", y = "Décennie")
data <-complete_data %>%
select(starts_with("avg_vote"))
report <- function(x, name) {
tibble(
variable  = name,
mean = round(mean(x, na.rm = FALSE), 2),
median = round(median(x, na.rm = FALSE), 2),
sd = round(sd(x), 2),
mad = round(mad(x, center = median(x), constant = 1.4826, na.rm = FALSE,
low = FALSE, high = FALSE), 2),
coef_de_var = round((sd(x)/mean(x))*100, 2),
max = round(max(x), 2),
min = round(min(x), 2)
)
}
Ind_Stat <- data %>% imap_dfr(report)
Ind_Stat
library(ggplot2)
ggplot(Ind_Stat, aes(x=variable, y=mean, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mean), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=median, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=median), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=sd, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=sd), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=mad, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=mad), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=coef_de_var, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=coef_de_var), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=max, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=max), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(Ind_Stat, aes(x=variable, y=min, fill=variable)) +
geom_bar(stat="identity", color="black")+
geom_text(aes(label=min), vjust=-0.3, size=3.5)+
theme_minimal()
library(reshape)
row.names(Ind_Stat) <- c("avg_vote","avg_vote_10","avg_vote_100",  "avg_vote_1000")
Ind_Stat$category <- row.names(Ind_Stat)
mInd_Stat <- melt(Ind_Stat, id.vars = "category")
Ind_Stat
Ind_Stat <- data %>% imap_dfr(report)
Ind_Stat
